package skiplist;

import java.util.ArrayList;

public class SList {
	SLNode head;
	SLNode nil;
	int size;
	ArrayList<Integer> levelCounts;
	int maxLevel;
	java.util.Random rand; 
	
	public SList(){
		maxLevel = 1;
		nil = new SLNode(Integer.MAX_VALUE,maxLevel);
		head = nil;
		head.next[0] = nil;
		levelCounts = new ArrayList<Integer>();
	}
	
	public ArrayList<Integer> toArrayList(){
		ArrayList<Integer> al = new ArrayList<Integer>();
		SLNode n = head;
		while(n != nil) {
			al.add(n.key);
			n = n.next[1];
		}
		return al;
	}
	
	// ensures an appropriate distribution of nodes at each level
	int getLevelForNextInsert(){
		float level = 1;
		for (int i : levelCounts){
			if (i < (float)size/Math.pow(2.0, level)){
				return (int)level;
			}
		}
		return 1; 
	}
	
	public void insert(int key){
		int level = getLevelForNextInsert();
		SLNode newNode = new SLNode(key,level);
		incrementLevelCounts(level);
		// insert to list and update pointers on preceeding nodes
		for (int l = 1; l <= maxLevel; l++){
			SLNode p = preceedingNodeAtLevel(key,l);
			SLNode nextL = p.next[l];
			p.next[l] = newNode;
			newNode.next[l] = nextL;
		}
		size++;
	}
	
	public SLNode preceedingNodeAtLevel(int key, int level) {
		int searchLevel = maxLevel;
		SLNode searchNode = head;
		SLNode preceedingNode = head;
		while (searchLevel > 0) {
			while (searchNode.key < key) {
				preceedingNode = searchNode;
				searchNode = searchNode.next[searchLevel];
			}
			searchNode = preceedingNode;
			searchLevel--;
		}
		return searchNode;
	}
	
	public void updateMaxLevel(int level){
		if (level > maxLevel) {
			// add empty spaces to levelCounts
			int levelCountDeficiency = level - levelCounts.size();
			for (int i = 1; i <= levelCountDeficiency; i++)
				levelCounts.add(0);
			
			// add more pointers to the head
			SLNode oldHead = head;
			head = new SLNode(head.key,level);
			int i;
			for (i = 0; i < oldHead.next.length; i++)
				head.next[i] = oldHead.next[i];
			while (i < level)
				head.next[i] = nil;
			
			// update the levelCounts to reflect the change in the level of head
			levelCounts.set(maxLevel - 1, levelCounts.get(maxLevel-1) -1);
			levelCounts.set(level - 1, levelCounts.get(level-1) + 1);
			
			// increase maxLevel
			maxLevel = level;
		}
	}
	
	public void incrementLevelCounts(int level){
		updateMaxLevel(level);
		levelCounts.set(level - 1,levelCounts.get(level-1) + 1);
	}
	
	public void delete(){
		// search, stopping if not found
		
		// update levelCounts
		
		// update maxLevel
		
		// update pointers
		
		size--;
	}
}
