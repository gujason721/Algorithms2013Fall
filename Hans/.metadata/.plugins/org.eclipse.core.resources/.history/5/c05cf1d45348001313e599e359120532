package redblack;

/* 
 * the functions in this class are based on pseudocode from _Algorithms_
 * by Corment, Leiserson, Rivest, and Stein.
 */
public class RBTree {
	RBNode nil = new RBNode();
	RBNode root = nil;
	
	public RBTree(){
		root.right = root.left = root.p = nil;
	}
	
	public void insert(RBNode z){
		RBNode y = nil;
		RBNode x = root;
		while (x != nil){
			y = x;
			if (z.key < x.key)
				x = x.left;
			else x = x.right;
		}
		z.p = y;
		if (y == nil)
			root = z;
		else if (x.key < y.key)
			y.left = z;
		else y.right = z;
		z.left = nil;
		z.right = nil;
		z.colour = Colour.RED;
		insertFixUp(z);
	}
	
	public void insertFixUp(RBNode z){
		RBNode y;
		while (z.p.colour == Colour.RED){
			if (z.p == z.p.p.left){
				y=z.p.p.right;
				if (y.colour == Colour.RED){
					z.p.colour = Colour.BLACK;
					y.colour = Colour.BLACK;
					z.p.p.colour = Colour.RED;
					z = z.p.p;
				} else {
					if (z == z.p.right){
						z = z.p;
						rotateLeft(z);
					}
					z.p.colour = Colour.BLACK;
					z.p.p.colour = Colour.RED;
					rotateRight(z.p.p);
				}
			} else { // same as then clause with right and left exchanged
				y=z.p.p.left;
				if (y.colour == Colour.RED){
					z.p.colour = Colour.BLACK;
					y.colour = Colour.BLACK;
					z.p.p.colour = Colour.RED;
					z = z.p.p;
				} else {
					if (z == z.p.left){
						z = z.p;
						rotateRight(z);
					}
					z.p.colour = Colour.BLACK;
					z.p.p.colour = Colour.RED;
					rotateLeft(z.p.p);
				}
			}
		}
		root.colour = Colour.BLACK;
	}
	
	public void delete(RBNode z){
		RBNode y = z;
		RBNode x;
		Colour yOriginalColour = y.colour;
		if (z.left == nil){
			x = z.right;
			transplant(z,z.right);
		} else if (z.right == nil){
			x = z.left;
			transplant(z,z.left);
		} else {
			y = treeMinimum(z.right);
			yOriginalColour = y.colour;
			x = y.right;
			if (y.p == z)
				x.p = y;
			else {
				transplant(y,y.right);
				y.right = z.right;
				y.right.p = y;
			}
			transplant(z,y);
			y.left = z.left;
			y.left.p = y;
			y.colour = z.colour;
		} 
		if (yOriginalColour == Colour.BLACK)
			deleteFixup(x);
	}
	
	public void deleteFixup(RBNode x){
		RBNode w;
		while (x != root && x.colour == Colour.BLACK){
			if (x == x.p.left){
				w = x.p.right;
				if (w.colour == Colour.RED){
					w.colour = Colour.BLACK;
					x.p.colour = Colour.RED;
					rotateLeft(x.p);
					w=x.p.right;
				} 
				if (w.left.colour == Colour.BLACK && w.right.colour == Colour.BLACK){
					w.colour = Colour.RED;
					x = x.p;
				}
				else {
					if (w.right.colour == Colour.BLACK){
						w.left.colour = Colour.BLACK;
						w.colour = Colour.RED;
						rotateRight(w);
						w = x.p.right;
					}
					w.colour = x.p.colour;
					x.p.colour = Colour.BLACK;
					w.right.colour = Colour.BLACK;
					rotateLeft(x.p);
					x = root;
				}
			} 
			else { // same as _then_ clause with "right" and "left" exchanged
				w = x.p.left;
				if (w.colour == Colour.RED){
					w.colour = Colour.BLACK;
					x.p.colour = Colour.RED;
					rotateRight(x.p);
					w=x.p.left;
				} 
				if (w.right.colour == Colour.BLACK && w.left.colour == Colour.BLACK){
					w.colour = Colour.RED;
					x = x.p;
				}
				else {
					if (w.left.colour == Colour.BLACK){
						w.right.colour = Colour.BLACK;
						w.colour = Colour.RED;
						rotateLeft(w);
						w = x.p.left;
					}
					w.colour = x.p.colour;
					x.p.colour = Colour.BLACK;
					w.left.colour = Colour.BLACK;
					rotateRight(x.p);
					x = root;
				}
			}
		}
		x.colour = Colour.BLACK;
	}
	
	public RBNode treeMinimum(){
		return treeMinimum(root);
	}
	
	public RBNode treeMinimum(RBNode x){
		while (x.left != nil) 
			x = x.left;
		return x;
	}
	
	public void transplant(RBNode u, RBNode v){
		if (u.p == nil)
			root = v;
		else if (u == u.p.left)
			u.p.left = v;
		else u.p.right = v;
		v.p = u.p;
	}
	
	public void rotateRight(RBNode y){
		RBNode x = y.left;

		// x.right becomes the left child of y
		y.left = x.right;
		if (x.right != nil)
			x.right.p = y;
		
	
		// x moves to the upper position, taking its new parent from y
		x.p = y.p;
		if (x.p == nil) // x may now be the new root
			root = x;
		else if (y == y.p.left) // if y was on its parent's left side 
			y.p.left = x;  // then x is the new left child of that parent
		else y.p.right = x; // otherwise x is the right child of that parent
		
		// y becomes the right child of x
		x.left = y;
		y.p = x;
	}	
	
	public void rotateLeft(RBNode x){
		RBNode y = x.right;
		
		// y.left becomes the right child of x
		x.right = y.left;
		if (y.left != nil)
			y.left.p = x;
		
		// y moves to the upper position, taking its new parent from x
		y.p = x.p;
		if (y.p == nil) // y may now be the new root
			root = y;
		else if (x == x.p.left) 
			x.p.left = y;
		else x.p.right = y;
		
		// x becomes the left child of y
		y.left = x;
		x.p = y;
	}
	
	public RBNode search (int k){
		return search(root,k);
	}
	
	public RBNode search(RBNode x, int k){
		while (x != nil && k != x.key){
			if (k < x.key)
				x = x.left;
			else x = x.right;
		}
		return x;
	}
}
