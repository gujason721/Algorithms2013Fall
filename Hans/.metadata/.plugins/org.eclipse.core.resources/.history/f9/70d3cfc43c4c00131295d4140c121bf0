package BTree;

import java.util.ArrayList;

public class BTree {
	BNode root;
	int t;
	int size;
	
	public BTree(int t){
		this.t = t;
		root = allocateNode();
		root.leaf = true;
		root.n = 0;
		size = 0;
	}
	
	public ArrayList<Integer> inOrderTraversal(){
		ArrayList<Integer> A = new ArrayList<Integer>();
		inOrderTraversal(A, root);
		return A;
	}
	
	public void inOrderTraversal(ArrayList<Integer> A, BNode x){
		int i;
		for (i = 0; i < x.n; i++){
			if (!x.leaf) inOrderTraversal(A, x.c[i]);
			A.add(x.key[i]);
		}
		if (!x.leaf) inOrderTraversal(A, x.c[i]);
	}
	
	public void insert(int k){
		BNode r = root;
		if (r.n == 2*t - 1){
			BNode s = allocateNode();
			root = s;
			s.leaf = false;
			s.n = 0;
			s.c[0] = r;
			splitChild(s,0);
			insertNonFull(s,k);
		} else {
			insertNonFull(r,k);
		}
		size++;
	}
	
	public void splitChild(BNode x, int i){
		BNode z = allocateNode();
		BNode y = x.c[i];
		z.leaf = y.leaf;
		z.n = t-1;
		for (int j=0; j <= t-2; j++)
			z.key[j]=y.key[j+t];
		if (!y.leaf)
			for (int j = 0; j <= t-1; j++)
				z.c[j] = y.c[j+t];
		y.n = t-1;
		for (int j = x.n; j >= i; j--) 
			x.c[j+1] = x.c[j];
		x.c[i+1] = z;
		for (int j = x.n - 1; j >= i; j--) // since i is correctly indexed when passed into the function, we go right down to i as in the pseudocode
			x.key[j+1]=x.key[j];
		x.key[i] = y.key[t-1];
		x.n++;
	}
	
	public BNode allocateNode(){
		return new BNode(this);
	}
	
	public BNode search(int k){
		return search(root,k);
	}
	
	public BNode search(BNode x, int k){
		int i = 0;
		while (i<x.n && k > x.key[i]) 
			i++;
		if (i < x.n && k == x.key[i]) 
			return x; // pseudocode in Algorithms 3rd ed. says return (x,i)
		else if (x.leaf)
			return null;
		return search(x.c[i],k);
	}
	
	public void insertNonFull(BNode x, int k){
		int i = x.n - 1;
		if (x.leaf){
			while (i >= 0 && k < x.key[i]) {
				x.key[i+1]=x.key[i];
				i--;
			}
			x.key[i+1] = k;
			x.n = x.n + 1;
		} else {
			while (i >= 0 && k < x.key[i]) 
				i--;
			i++;
			if (x.c[i].n == t*2-1){
				splitChild(x,i);
				if (k > x.key[i])
					i++;
			}
			insertNonFull(x.c[i],k);
		}
	}

	/*public void delete(int k){
		BNode x = search(k);
		if (x != null){
			delete(x);
			size--;
		}
	}*/
	
	public void delete (int k, BNode x){
		int kIdx = x.findKey(k);
		// cases 1, 2 if the key k is in node x
		if (kIdx != -1){
			if (x.leaf) { // case 1: x is a leaf; delete k from x
				
			} else { // case 2: x is an internal node
				BNode y = x.c[kIdx];
				if (y.n >= t){// case 2a: the child y that precedes k in node x has at least t keys
				
				} else { // case 2b,c: y has fewer than t keys
					BNode z = x.c[kIdx+1];
					if (z.n >= t) { // case 2b: If z has at least t keys
						
					} else { // case 2c: If z has fewer than t keys
						
					}
				}
			}
		} else { // case 3: x does not contain k
			int idxOfSubTreeContK = x.findSubTree(k);
			BNode subTreeContK = x.c[idxOfSubTreeContK];
			if (subTreeContK.n == t-1) { // case 3a,b
				leftSibling = idxOfSubTreeContK - 1;
				rightSibling = leftSibling + 2;
				if (leftSibling >= 0 && x.c[leftSibling].n >= t) { // case 3a.1 - left sibling has at least t keys
					// give a key to subTreeContK
				} else if (rightSibling <= x.n && x.c[rightSibling].n >= t){ // case 3a.2 - right sibling has at least t keys
				    // give a key to subTreeContK	
				} else { // case 3b: neither the left nor the right siblings have t keys
					
				}
			}
			delete(k,subTreeContK);
		}
	}
}
