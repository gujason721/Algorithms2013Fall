package BTree;

import java.util.ArrayList;

public class BTree {
	BNode root;
	int t;
	int size;
	
	public BTree(int t){
		this.t = t;
		root = allocateNode();
		root.leaf = true;
		root.n = 0;
		size = 0;
	}
	
	public ArrayList<Integer> inOrderTraversal(){
		ArrayList<Integer> A = new ArrayList<Integer>();
		inOrderTraversal(A, root);
		return A;
	}
	
	public void inOrderTraversal(ArrayList<Integer> A, BNode x){
		int i;
		for (i = 0; i < x.n; i++){
			if (!x.leaf) inOrderTraversal(A, x.c[i]);
			A.add(x.key[i]);
		}
		if (!x.leaf) inOrderTraversal(A, x.c[i]);
	}
	
	public void insert(int k){
		BNode r = root;
		if (r.n == 2*t - 1){
			BNode s = allocateNode();
			root = s;
			s.leaf = false;
			s.n = 0;
			s.c[0] = r;
			splitChild(s,0);
			insertNonFull(s,k);
		} else {
			insertNonFull(r,k);
		}
		size++;
	}
	
	public void splitChild(BNode x, int i){
		BNode z = allocateNode();
		BNode y = x.c[i];
		z.leaf = y.leaf;
		z.n = t-1;
		for (int j=0; j <= t-2; j++)
			z.key[j]=y.key[j+t];
		if (!y.leaf)
			for (int j = 0; j <= t-1; j++)
				z.c[j] = y.c[j+t];
		y.n = t-1;
		for (int j = x.n; j >= i; j--) 
			x.c[j+1] = x.c[j];
		x.c[i+1] = z;
		for (int j = x.n - 1; j >= i;) // since i is correctly indexed when passed into the function, we go right down to i as in the pseudocode
			x.key[j+1]=x.key[j];
		x.key[i] = y.key[t-1];
		x.n++;
	}
	
	public BNode allocateNode(){
		// TODO: write this
		return new BNode(this);
	}
	
	public BNode search(int k){
		return search(root,k);
	}
	
	public BNode search(BNode x, int k){
		int i = 0;
		while (i<x.n && k > x.key[i]) 
			i++;
		if (i < x.n && k == x.key[i]) 
			return x; // pseudocode in Algorithms 3rd ed. says return (x,i)
		else if (x.leaf)
			return null;
		return search(x.c[i],k);
	}
	
	public void insertNonFull(BNode x, int k){
		int i = x.n - 1;
		if (x.leaf){
			while (i >= 0 && k < x.key[i]) {
				x.key[i+1]=x.key[i];
				i--;
			}
			x.key[i+1] = k;
			x.n = x.n + 1;
		} else {
			while (i >= 0 && k < x.key[i]) 
				i--;
			i++;
			if (x.c[i].n == t*2-1){
				splitChild(x,i);
				if (k > x.key[i])
					i++;
			}
			insertNonFull(x.c[i],k);
		}
	}

	public void delete(int k){
		BNode x = search(k);
		if (x != null){
			delete(x);
			size--;
		}
	}
	
	public void delete (BNode x){
		// TODO: write this
	}
}
